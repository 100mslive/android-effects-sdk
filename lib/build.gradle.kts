/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    `java-library`
    `maven-publish`
    `signing`
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit test framework.
    testImplementation("junit:junit:4.13.2")
}

tasks.register("generateFakeSources") {
    doLast {
        val fakeSourceReadmeFolder = File("${rootDir}/lib/build/fakesources/")
        fakeSourceReadmeFolder.mkdirs()

        val fakeSourceReadme = File("${rootDir}/lib/build/fakesources/README.md")

        if(!fakeSourceReadme.exists()) {
            fakeSourceReadme.createNewFile()
        }

        fakeSourceReadme.writeText("Sources are available at: https://webrtc.googlesource.com/src")
    }
}

tasks.register<Jar>("fakeSources") {
    dependsOn("generateFakeSources")
    archiveFileName.set("lib-release-sources.jar")
    from("${rootDir}/lib/build/fakesources/")
    archiveClassifier.set("sources")
}

tasks.register("generateFakeJavadoc") {
    doLast {
        val fakeJavadocReadmeFolder = File("${rootDir}/lib/build/fakejavadoc/")
        fakeJavadocReadmeFolder.mkdirs()

        val fakeJavadocReadme = File("${rootDir}/lib/build/fakejavadoc/README.md")

        if(!fakeJavadocReadme.exists()) {
            fakeJavadocReadme.createNewFile()
        }

        fakeJavadocReadme.writeText("Javadoc available at: https://webrtc.org/")
    }
}

tasks.register<Jar>("fakeJavadoc") {
    dependsOn("generateFakeJavadoc")
    archiveFileName.set("lib-release-javadoc.jar")
    from("build/fakejavadoc")
    archiveClassifier.set("javadoc")
}


publishing {
    publications {
        create<MavenPublication>("release") {
            groupId = "${project.properties["hmsSdkGroup"]}"
            artifactId = "effectssdk"
            version = "${project.properties["EFFECTS_SDK_LIBRARY_VERSION_NAME"]}"

            artifact("../effects.aar")

            // Only run signing/javadoc/sources for sonatype builds, which we judge by seeing if the group is is com.github.100mslive
            
            if(groupId != "com.github.100mslive") {
                
                artifact(tasks["fakeSources"])
                artifact(tasks["fakeJavadoc"])

                signing {
                    sign(tasks["fakeSources"])
                    sign(tasks["fakeJavadoc"])
                    sign(publishing.publications["release"])
                    sign(configurations.archives.get())
                }

            }

            pom {
                name.set("Effects Sdk")
                description.set("A packaging of the effects sdk.")
                url.set("https://effectssdk.ai/")
                licenses {
                    license {
                        name.set("Effects Sdk Licence")
                        url.set("https://docs.byteplus.com/en/docs/legal/docs-terms-of-service")
                    }
                }
                developers {
                        developer {
                            id.set("1")
                            name.set("https://effectssdk.ai/")
                        }
                    }
                    scm {
                        connection.set("Private repo")
                        developerConnection.set("Private repo")
                        url.set("https://effectssdk.ai/")
                    }

            }
        }
    }
}
